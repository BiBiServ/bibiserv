
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */


/* Options from Template
options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}
*/

/* Original Options */
options {
   LOOKAHEAD=3;
   FORCE_LA_CHECK=true;
   JAVA_UNICODE_ESCAPE=true;
   IGNORE_CASE=true;
   STATIC=false;
}

PARSER_BEGIN(BibtexParser)
package de.unibi.cebitec.bibiserv.util.bibtexparser;

import de.unibi.techfak.bibiserv.util.ontoaccess.BiBiPerson;
import de.unibi.techfak.bibiserv.util.ontoaccess.BiBiPublication;
import de.unibi.techfak.bibiserv.util.ontoaccess.bibiontotypes.BiBiPersonImplementation;
import de.unibi.techfak.bibiserv.util.ontoaccess.bibiontotypes.BiBiPublicationImplementation;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public final class BibtexParser {

final public class BibMap extends HashMap {

    private static final long serialVersionUID = -6088386205750299855L;
	private char hashdelim = '\u0000';
	private String type;
	private String key;
	private String uri;
	
	public void setType(String type){
	    this.type = type;
	}

	public String getType(){
	    return type;
	}

	public void setKey(String key){
	    this.key = key;
	}

	public String getKey(){
	    return key;
	}
	
	public String getURI(){
	    return uri;
	}

	/** 
	 * Some strings in the map are enclosed in brackets {} because they
	 * were strings in the original bibtex.  This method removes those
	 * brackets indiscriminately. 
	 */
	public void normalizeStrings(){
            Iterator keyset = keySet().iterator();
            while(keyset.hasNext()){
                Object key = keyset.next();
                String value = (String) get(key);
                if (value.startsWith("{")) {
                    put(key, value.substring(1,value.length()-1));
		}
            }
        }
    }
    static final String [][] months = new String[][]{
        {"jan", "{January}"}, 
        {"feb", "{February}"},
        {"mar", "{March}"}, 
        {"apr", "{April}"},
        {"may", "{May}"}, 
        {"jun", "{June}"},
        {"jul", "{July}"}, 
        {"aug", "{August}"},
        {"sep", "{September}"}, 
        {"oct", "{October}"},
        {"nov", "{November}"}, 
        {"dec", "{December}"}
    };
    private String preamble = "";
    private String comment = "";
    private Map strings = new HashMap();
    private List records = new ArrayList();
    //Hashmaps for mapping from BibTeX to BibO
    private Map<String, String> bibTypes = new HashMap<String, String>();
    private Map<String, Map<String, String>> bibTypesAdditionalProperties = null;
    private Map<String, String> bibProperties = new HashMap<String, String>();
    private Map<String, Map<String, String>> bibPropertiesAdditionalObjects = null;
   
    /** 
      * Returns the records.  Should be called after parse(). 
      */
    public List getRecords(){
        return records;
    }

    public void createOntologyIndividuals() {
        //fill in the types mapping for bibo
        bibTypes.put("book", "bibo:Book");
        bibTypes.put("booklet", "bibo:Book");
        bibTypes.put("misc", "bibo:Document");
        bibTypes.put("article", "bibo:Article");
        bibTypes.put("inbook", "bibo:Chapter");
        bibTypes.put("manual", "bibo:Manual");
        bibTypes.put("inproceedings", "bibo:Article");
        bibTypes.put("conference", "bibo:Article");
        bibTypes.put("unpublished", "bibo:Document");
        bibTypes.put("masterthesis", "bibo:Thesis");
        bibTypes.put("phdthesis", "bibo:Thesis");
        bibTypes.put("proceedings", "bibo:Proceedings");
        bibTypes.put("techreport", "bibo:Report");
        bibTypes.put("incollection", "bibo:BookSection");
        bibTypes.put("heading", "bibo:Collection");
        bibTypes.put("subject", "umbel:SubjectConcept");
        bibTypes.put("person", "foaf:Person");

        //fill in the mapping for types which must create new individuals
//        bibTypesAdditionalProperties.add("unpublished", new ("bibo:status", "http://purl.org/ontology/bibo/status/unpublished"),
//        bibTypesAdditionalProperties.add("masterthesis", new ("bibo:degree", "http://purl.org/ontology/bibo/degrees/ma"),
//        bibTypesAdditionalProperties.add("phdthesis", new ("bibo:degree", "http://purl.org/ontology/bibo/degrees/phd"));


//    /*  
//    Dropped from core:  - howpublished
//    - key
//    - annote
//     */

//    /*
//    BIBTYPES (custom): HEADING, PERSON, SUBJECTS  
//    HEADING  ???
//    ID ???
//    KEY_AU ???
//    AUTHOR_AR ???
//    AUTHOR_ID_MR ??? (not used)
//    BUT ???
//    POST (what posted refers to?)
//    HOWPUBLISHED (same as publisher?)
//    HOWPUBLISHED_AR (what AR refers to?)
//    FJOURNAL (why duplicating journal for fjournal (only a change in the name); This should appears in the description of the journal itself.)
//    MRREVIEWER    
//     */


        //fill in the properties mapping
        bibProperties.put("title", "dcterms:title");
        bibProperties.put("author", "dcterms:creator");
        bibProperties.put("booktitle", "dcterms:title");
        bibProperties.put("publisher", "dcterms:publisher");
        bibProperties.put("year", "dcterms:date");
        bibProperties.put("month", "dcterms:date");
        bibProperties.put("isbn", "bibo:isbn");
        bibProperties.put("editor", "bibo:editor");
        bibProperties.put("institution", "dcterms:contributor");
        bibProperties.put("volume", "bibo:volume");
        bibProperties.put("url", "bkn:url");
        bibProperties.put("type", "dcterms:type");
        bibProperties.put("series", "dcterms:isPartOf");
        bibProperties.put("pages", "bibo:pages");
        bibProperties.put("organization", "bibo:organizer");
        bibProperties.put("number", "bibo:number");
        bibProperties.put("note", "skos:note");
        bibProperties.put("journal", "dcterms:isPartOf");
        bibProperties.put("edition", "bibo:edition");
        bibProperties.put("chapter", "bibo:chapter");
        bibProperties.put("address", "address:localityName");
        bibProperties.put("eprint", "bkn:eprint");
        bibProperties.put("crossref", "dcterms:isPartOf");
        bibProperties.put("name", "foaf:name");
        bibProperties.put("homepage", "foaf:homepage");
        bibProperties.put("last_updated", "dcterms:modified");
        bibProperties.put("bibliography", "foaf:page");
        bibProperties.put("honor", "foaf:page");
        bibProperties.put("born_date", "foaf:birthdate");
        bibProperties.put("death_date", "bio:event");
        bibProperties.put("image", "foaf:page");
        bibProperties.put("memorial", "foaf:page");
        bibProperties.put("biography", "foaf:page");
        bibProperties.put("url", "bkn:url");
        bibProperties.put("author_tex", "bkn:authorTex");
        bibProperties.put("title_tex", "bkn:titleTex");
        bibProperties.put("coden", "bibo:coden");
        bibProperties.put("sici", "bibo:sici");
        bibProperties.put("mrclass", "bkn:mrClass");
        bibProperties.put("mrnumber", "bkn:mrNumber");
        bibProperties.put("arxiv", "bkn:arxiv");
        bibProperties.put("euclid", "bkn:euclid");
        bibProperties.put("id_ar", "bkn:ar");
        bibProperties.put("msc_mr", "bkn:mscmr");
        bibProperties.put("comment", "skos:note");
        bibProperties.put("comment_post", "skos:note");
        bibProperties.put("rev", "dcterms:modified");
        bibProperties.put("date", "dcterms:date");
        bibProperties.put("subjectTitle", "skos:prefLabel");
        bibProperties.put("subjects", "umbel:isAbout");
        // Bibsonomy.org BIBTEX extension
        bibProperties.put("biburl", "bkn:url");
        bibProperties.put("keywords", "dcterms:subject");
        bibProperties.put("abstract", "bibo:abstract");
        bibProperties.put("asin", "bibo:asin");
        bibProperties.put("ean", "bibo:eanucc13");
        bibProperties.put("doi", "bibo:doi");
        bibProperties.put("issn", "bibo:issn");
        bibProperties.put("description", "dcterms:description");

        // Sometimes a bibtex property introduce a new resource. In such a case, we have to specify what is the type
        // of the resource, and the property where the value of the bibtex property will be converted.
        //
        // For example, the property "author" suggest that a bibtex item refers to a person resource.
        // This property is clearly introducing a new resource. This new resource will be of type "foaf:Person" and the
        // value of this bibtex property will be described using the "foaf:name" property.

        //fill in the additional "objects from properties" mapping
//        "author"        , array("foaf:Agent", "foaf:name");
//        "publisher"        , array("foaf:Organization", "foaf:name");
//        "editor"        , array("foaf:Person", "foaf:name");
//        "institution"        , array("foaf:Organization", "foaf:name");
//        "series"        , array("bibo:Series", "dcterms:title");
//        "organization"        , array("foaf:Organization", "foaf:name");
//        "journal", array("bibo:Journal", "dcterms:title");
//        "homepage", array("bkn:Homepage", "bkn:url");


    }

    /**
      * Returns a list of BiBiPublication Records for the parsed BibTeX snippet(s)
      */
    public List<BiBiPublication> getPublicationObjects() {

        List<BiBiPublication> retlist = new ArrayList<BiBiPublication>();

        Iterator iter = records.iterator();
        while (iter.hasNext()) {
            BiBiPublication p = new BiBiPublicationImplementation();
            BibMap record = (BibMap) iter.next();

            //remove eventual braces
            record.normalizeStrings();

            //do not forget to set the type on the publication object
            p.setType(record.getType().toLowerCase().replaceAll(" ", ""));
            //now, insert the publication key which identifies this object
            p.setPubkey(record.getKey());
            Iterator jiter = record.keySet().iterator();
            //check for all the available fields, fill BiBiPublication with relevant values
            while (jiter.hasNext()) {
                String key = (String) jiter.next();
                String value = (String) record.get(key);
                if (key.equals("title")) {
                    p.setTitle(value);
                } else if (key.equals("author")) {
                    BiBiPerson bp;
                    //handel (possibly many) authors
                    //split author list at "and"
                    String[] authors = value.split("(?i)and");
                    //check each author
                    for (String author : authors) {
                        bp = new BiBiPersonImplementation();
                        //family name ist first field
                        String[] names = author.split(",");
                        bp.setFamily_name(names[0].trim());
                        //given name(s) should be second field
                        if (names.length > 1) {
                            //StringBuilder gn = new StringBuilder();
                            //for (int i = 1; i < names.length; i++) {
                            //    gn.append(names[i]);
                            //}
                            bp.setGivenname(names[1].trim());
                    }
                        p.addAuthor(bp);
                        bp = null;
                    }
                } else if (key.equals("journal")) {
                    p.setJournal(value);
                } else if (key.equals("year")) {
                    Calendar cal = Calendar.getInstance();
                    cal.set(Integer.parseInt(value), 1, 1);
                    p.setPublicationdate(cal.getTime());
                }
            }
            retlist.add(p);
            p = null;
            System.out.println("");
        }
        return retlist;
    }

    /** 
      * Prints debugging output. Should be called after parse(). 
      */
    public void printout() {
        if (!"".equals(preamble)) System.out.println("\nDEBUG: Found Preamble: \n" + preamble);

        System.out.println("\nDEBUG: Found " + strings.size() + " Strings:");
        Iterator iter = strings.keySet().iterator();
        while(iter.hasNext()){
            Object key = iter.next(); 
            System.out.println("\t" + key + "\t" + strings.get(key));
        }

        System.out.println("\nDEBUG: Found " + records.size() + " Records:");
        iter = records.iterator();
        while (iter.hasNext()) {
            System.out.println("-----------------------------------");
            BibMap record = (BibMap) iter.next();
            System.out.println("TYPE:\t" + record.getType());
            System.out.println("KEY:\t" + record.getKey());
            Iterator jiter = record.keySet().iterator();
            while (jiter.hasNext()) {
                String key = (String) jiter.next();
                System.out.println("\tFIELD:\t" + key + "\t" + record.get(key));
            }
            System.out.println("");
        }
    }
}
    
PARSER_END(BibtexParser)

TOKEN:{
        < AT: "@" >
      | < WS: ([" ","\r","\t", "\n"])+ >
      | < STR: "string" >
      | < PRE: "preamble" >
      | < COMMENT: "comment" >
      | < EQ: "=" >
      | < HASH: "#" >
      | < COMMA: (<WS>)? "," >
      | < LPAREN: "(" >
      | < RPAREN: ")" >
      | < QUOTE:  "\"">
      | < LBRACE: "{" >
      | < RBRACE: "}" >
      | < DELIM: "{" | "}" | "(" | ")" | "\"" >
      | < QCHAR: "\\" <DELIM> | "\\%" >   // also a word
      | < WORD: (<LETTER>|<DIGIT>|<SIGN>)+ >
      | < LETTER:
          [
           "\u0000",
           "\u0041"-"\u005a",
           "\u005f",
           "\u0061"-"\u007a",
           "\u00c0"-"\u00d6",
           "\u00d8"-"\u00ff",
           "\u0100"-"\u1fff",
           "\u3040"-"\u318f",
           "\u3300"-"\u337f",
           "\u3400"-"\u3d2d",
           "\u4e00"-"\u9fff",
           "\uf900"-"\ufaff"
          ]
        >
      | < DIGIT: 
          [
           "\u0030"-"\u0039",
           "\u0660"-"\u0669",
           "\u06f0"-"\u06f9",
           "\u0966"-"\u096f",
           "\u09e6"-"\u09ef",
           "\u0a66"-"\u0a6f",
           "\u0ae6"-"\u0aef",
           "\u0b66"-"\u0b6f",
           "\u0be7"-"\u0bef",
           "\u0c66"-"\u0c6f",
           "\u0ce6"-"\u0cef",
           "\u0d66"-"\u0d6f",
           "\u0e50"-"\u0e59",
           "\u0ed0"-"\u0ed9",
           "\u1040"-"\u1049"
          ]
        >
      | < SIGN:
          [
           "!",
           "%",
           "*",
           "+",
           "-",
           "<",
           ">",
           "|",
           "?",
           "&",
           "$",
           "~",
           "'",
           "\\",
           ".",
           "^",
           "`",
           ":",
           "/",
           "[",
           "]",
           "_",
           ";",
           "\u0080"-"\u00BF",
           "\u00d7",
           "\u00f7",
           "\u2019",
           "\ufffd"
         ]
       >
}

/** 
  * A bibtex file is basically a concatenation of records, which are
  * either string definitions or proper bibliographic records.  This
  * method just consumes records until the file ends, at which point it
  * resolves cross-references within individual records. 
  */
void parse():
{
    // Load the default string expansions for months.  My impression
    // is that these are supposed to expand to locale-specific strings
    // for the month.  This hack effectively makes this an "English 
    // bibtex parser"
    for (int i = 0; i < months.length; i++) {
        strings.put(months[i][0], months[i][1]);
    }
}
{
    ( strdef() | comdef() | recdef() | predef() | <WORD> | <COMMA> | <WS> | <EOF> { return; })*
}

/** 
  * Consumes a preamble definition. 
  */
void predef():
{
    String val;
}
{
    <AT> <PRE> [<WS>] (
       (<LBRACE> [<WS>] (val = vals()) [<WS>] <RBRACE>)
     | (<LPAREN> [<WS>] (val = vals()) [<WS>] <RPAREN>)
    )
    { preamble = preamble + val; }
}


/** 
  * Consumes a single string definition. A string definition is
  * basically a single pair. 
  */
void strdef():
{
}
{
    <AT> <STR> [<WS>] (
       (<LBRACE> pair(strings) [<WS>] <RBRACE>)
     | (<LPAREN> pair(strings) [<WS>] <RPAREN>)
    )
}

/** 
  * Consumes a comment definition.
  */
void comdef():
{
}
{
    <AT> <COMMENT> [<WS>] (
       (<LBRACE> (<WORD>|<WS>)+ <RBRACE>)
     | (<LPAREN> (<WORD>|<WS>)+ <RPAREN>)
    )
}

/** 
  * Consumes a single record definition. 
  */
void recdef():
{
    Token t1 = null;
    Token t2 = null;
    BibMap record = new BibMap();
}
{
    <AT> (t1 = <WORD>) [<WS>] (
        (<LBRACE> [<WS>] [(t2=<WORD> | t2=<COMMENT> | t2=<STR> | t2=<PRE>) <COMMA>] (pair(record))* [<WS>] <RBRACE>)
      | (<LPAREN> [<WS>] [(t2=<WORD> | t2=<COMMENT> | t2=<STR> | t2=<PRE>) <COMMA>] (pair(record))* [<WS>] <RPAREN>)
    )
    {
        record.setType(t1.toString().toLowerCase());
        if (t2 != null) {
            record.setKey(t2.toString());
        }
        records.add(record);
    }
}

/** 
  * Consumes a pair and places them in map. 
  */
void pair(Map map):
{
    Token id;
    String val;
}
{
    [<WS>] (id=<WORD> | id=<COMMENT> | id=<STR> | id=<PRE>) [<WS>] <EQ> [<WS>] (val = vals()) [<WS>] [<COMMA>]
    { 
        String name = id.toString().toLowerCase();
        
        // NOTE(SM): Zotero splits comments in several fields, so here we put them back together as one.
        if ("comment".equals(name) && map.containsKey(name)) {
            val = (String) map.get(name) + "\n" + val;
        }
        
        map.put(name, val); 
    }
}

/** 
  * Consumes a concatenation of "values" 
  */
String vals():
{
    String val;
    StringBuffer sb = new StringBuffer();
}
{
    val = val() { sb.append(val); }
    ([<WS>] <HASH> [<WS>] val = val() 
        {
            if (sb.charAt(0) == '{') {
                sb.deleteCharAt(sb.length()-1); // must be a curly brace
            }
            if (val.startsWith("{")) {
                val = val.substring(1, val.length()-1);
            }
            sb.append(val + "}");
        }
    )*  
    { return sb.toString(); }
}

/** 
  * Consumes a value, plus any trailing whitespace 
  */
String val():
{
    Token token;
    String val;
}
{
    <LBRACE> (val = wordsq()) <RBRACE> { return "{" + val + "}"; }
    | <QUOTE> (val = words()) <QUOTE> { return "{" + val + "}"; }
    | (token = <WORD>) 
    {
        String key = token.toString().toLowerCase();
        if (strings.containsKey(key)) {
            return (String) strings.get(key);
        } else {
            return key;
        }
    } 
}

/** 
  * Consumes a set of words, where a quote token is a word. 
  */
String wordsq():
{
    String s;
    Token t;
    StringBuffer sb = new StringBuffer();
}
{
    (s=wordq() { sb.append(s); }
     | <LBRACE> (s=wordsq()) <RBRACE> { sb.append("{" + s + "}"); }
    )*
    { return sb.toString(); }
}

/** 
  * Consumes a set of words, where a quote token is not a word. 
  */
String words():
{
    String s;
    Token t;
    StringBuffer sb = new StringBuffer();
}
{
    (s=word() { sb.append(s); }
     | <LBRACE> (s=wordsq()) <RBRACE> { sb.append("{" + s + "}"); }
    )*
    { return sb.toString(); }
}

/** 
  * Consumes and returns a "word", where a quote token is a word. 
  */
String wordq():
{
    Token t;
}
{
    (t=<WS> | t=<WORD> | t=<EQ> | t=<LPAREN> | t=<RPAREN> | t=<AT> | t=<QCHAR> | t=<STR>| t=<COMMA> | t=<HASH>  | t=<PRE> | t=<QUOTE> | t=<COMMENT>)
    { return(t.toString()); }
}

/** 
  * Consumes and returns a "word", where a quote token is not a word. 
  */
String word():
{
    Token t;
}
{
    (t=<WS> | t=<WORD> | t=<EQ> | t=<LPAREN> | t=<RPAREN> | t=<AT> | t=<QCHAR> | t=<STR>| t=<COMMA> | t=<HASH> | t=<PRE> | t=<COMMENT>)
    { return(t.toString()); }
}


/* Generated By:JavaCC: Do not edit this line. BibtexParser.java */
package de.unibi.cebitec.bibiserv.util.bibtexparser;

import de.unibi.techfak.bibiserv.util.ontoaccess.bibiontotypes.BiBiPerson;
import de.unibi.techfak.bibiserv.util.ontoaccess.bibiontotypes.BiBiPublication;
import de.unibi.techfak.bibiserv.util.ontoaccess.bibiontotypes.impl.BiBiPersonImplementation;
import de.unibi.techfak.bibiserv.util.ontoaccess.bibiontotypes.impl.BiBiPublicationImplementation;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class BibtexParser implements BibtexParserConstants {

    final public class BibMap extends HashMap {

        private static final long serialVersionUID = -6088386205750299855L;
        private char hashdelim = '\u0000';
        private String type;
        private String key;
        private String uri;

        public void setType(String type) {
            this.type = type;
        }

        public String getType() {
            return type;
        }

        public void setKey(String key) {
            this.key = key;
        }

        public String getKey() {
            return key;
        }

        public String getURI() {
            return uri;
        }

        /** 
         * Some strings in the map are enclosed in brackets {} because they
         * were strings in the original bibtex.  This method removes those
         * brackets indiscriminately. 
         */
        public void normalizeStrings() {
            Iterator keyset = keySet().iterator();
            while (keyset.hasNext()) {
                Object key = keyset.next();
                String value = (String) get(key);
                if (value.startsWith("{")) {
                    put(key, value.substring(1, value.length() - 1));
                }
            }
        }
    }
    static final String[][] months = new String[][]{
        {"jan", "{January}"},
        {"feb", "{February}"},
        {"mar", "{March}"},
        {"apr", "{April}"},
        {"may", "{May}"},
        {"jun", "{June}"},
        {"jul", "{July}"},
        {"aug", "{August}"},
        {"sep", "{September}"},
        {"oct", "{October}"},
        {"nov", "{November}"},
        {"dec", "{December}"}
    };
    private String preamble = "";
    private String comment = "";
    private Map strings = new HashMap();
    private List records = new ArrayList();
    //Hashmaps for mapping from BibTeX to BibO
    private Map<String, String> bibTypes = new HashMap<String, String>();
    private Map<String, Map<String, String>> bibTypesAdditionalProperties = null;
    private Map<String, String> bibProperties = new HashMap<String, String>();
    private Map<String, Map<String, String>> bibPropertiesAdditionalObjects =
            null;
    private static final Pattern AND_PATTERN =
            Pattern.compile("\\s+and(\\s+|$)");

    /** 
     * Returns the records.  Should be called after parse(). 
     */
    public List getRecords() {
        return records;
    }

    public void createOntologyIndividuals() {
        //fill in the types mapping for bibo
        bibTypes.put("book", "bibo:Book");
        bibTypes.put("booklet", "bibo:Book");
        bibTypes.put("misc", "bibo:Document");
        bibTypes.put("article", "bibo:Article");
        bibTypes.put("inbook", "bibo:Chapter");
        bibTypes.put("manual", "bibo:Manual");
        bibTypes.put("inproceedings", "bibo:Article");
        bibTypes.put("conference", "bibo:Article");
        bibTypes.put("unpublished", "bibo:Document");
        bibTypes.put("masterthesis", "bibo:Thesis");
        bibTypes.put("phdthesis", "bibo:Thesis");
        bibTypes.put("proceedings", "bibo:Proceedings");
        bibTypes.put("techreport", "bibo:Report");
        bibTypes.put("incollection", "bibo:BookSection");
        bibTypes.put("heading", "bibo:Collection");
        bibTypes.put("subject", "umbel:SubjectConcept");
        bibTypes.put("person", "foaf:Person");

        //fill in the mapping for types which must create new individuals
//        bibTypesAdditionalProperties.add("unpublished", new ("bibo:status", "http://purl.org/ontology/bibo/status/unpublished"),
//        bibTypesAdditionalProperties.add("masterthesis", new ("bibo:degree", "http://purl.org/ontology/bibo/degrees/ma"),
//        bibTypesAdditionalProperties.add("phdthesis", new ("bibo:degree", "http://purl.org/ontology/bibo/degrees/phd"));


//    /*  
//    Dropped from core:  - howpublished
//    - key
//    - annote
//     */

//    /*
//    BIBTYPES (custom): HEADING, PERSON, SUBJECTS  
//    HEADING  ???
//    ID ???
//    KEY_AU ???
//    AUTHOR_AR ???
//    AUTHOR_ID_MR ??? (not used)
//    BUT ???
//    POST (what posted refers to?)
//    HOWPUBLISHED (same as publisher?)
//    HOWPUBLISHED_AR (what AR refers to?)
//    FJOURNAL (why duplicating journal for fjournal (only a change in the name); This should appears in the description of the journal itself.)
//    MRREVIEWER    
//     */


        //fill in the properties mapping
        bibProperties.put("title", "dcterms:title");
        bibProperties.put("author", "dcterms:creator");
        bibProperties.put("booktitle", "dcterms:title");
        bibProperties.put("publisher", "dcterms:publisher");
        bibProperties.put("year", "dcterms:date");
        bibProperties.put("month", "dcterms:date");
        bibProperties.put("isbn", "bibo:isbn");
        bibProperties.put("editor", "bibo:editor");
        bibProperties.put("institution", "dcterms:contributor");
        bibProperties.put("volume", "bibo:volume");
        bibProperties.put("url", "bkn:url");
        bibProperties.put("type", "dcterms:type");
        bibProperties.put("series", "dcterms:isPartOf");
        bibProperties.put("pages", "bibo:pages");
        bibProperties.put("organization", "bibo:organizer");
        bibProperties.put("number", "bibo:number");
        bibProperties.put("note", "skos:note");
        bibProperties.put("journal", "dcterms:isPartOf");
        bibProperties.put("edition", "bibo:edition");
        bibProperties.put("chapter", "bibo:chapter");
        bibProperties.put("address", "address:localityName");
        bibProperties.put("eprint", "bkn:eprint");
        bibProperties.put("crossref", "dcterms:isPartOf");
        bibProperties.put("name", "foaf:name");
        bibProperties.put("homepage", "foaf:homepage");
        bibProperties.put("last_updated", "dcterms:modified");
        bibProperties.put("bibliography", "foaf:page");
        bibProperties.put("honor", "foaf:page");
        bibProperties.put("born_date", "foaf:birthdate");
        bibProperties.put("death_date", "bio:event");
        bibProperties.put("image", "foaf:page");
        bibProperties.put("memorial", "foaf:page");
        bibProperties.put("biography", "foaf:page");
        bibProperties.put("url", "bkn:url");
        bibProperties.put("author_tex", "bkn:authorTex");
        bibProperties.put("title_tex", "bkn:titleTex");
        bibProperties.put("coden", "bibo:coden");
        bibProperties.put("sici", "bibo:sici");
        bibProperties.put("mrclass", "bkn:mrClass");
        bibProperties.put("mrnumber", "bkn:mrNumber");
        bibProperties.put("arxiv", "bkn:arxiv");
        bibProperties.put("euclid", "bkn:euclid");
        bibProperties.put("id_ar", "bkn:ar");
        bibProperties.put("msc_mr", "bkn:mscmr");
        bibProperties.put("comment", "skos:note");
        bibProperties.put("comment_post", "skos:note");
        bibProperties.put("rev", "dcterms:modified");
        bibProperties.put("date", "dcterms:date");
        bibProperties.put("subjectTitle", "skos:prefLabel");
        bibProperties.put("subjects", "umbel:isAbout");
        // Bibsonomy.org BIBTEX extension
        bibProperties.put("biburl", "bkn:url");
        bibProperties.put("keywords", "dcterms:subject");
        bibProperties.put("abstract", "bibo:abstract");
        bibProperties.put("asin", "bibo:asin");
        bibProperties.put("ean", "bibo:eanucc13");
        bibProperties.put("doi", "bibo:doi");
        bibProperties.put("issn", "bibo:issn");
        bibProperties.put("description", "dcterms:description");

        // Sometimes a bibtex property introduce a new resource. In such a case, we have to specify what is the type
        // of the resource, and the property where the value of the bibtex property will be converted.
        //
        // For example, the property "author" suggest that a bibtex item refers to a person resource.
        // This property is clearly introducing a new resource. This new resource will be of type "foaf:Person" and the
        // value of this bibtex property will be described using the "foaf:name" property.

        //fill in the additional "objects from properties" mapping
//        "author"        , array("foaf:Agent", "foaf:name");
//        "publisher"        , array("foaf:Organization", "foaf:name");
//        "editor"        , array("foaf:Person", "foaf:name");
//        "institution"        , array("foaf:Organization", "foaf:name");
//        "series"        , array("bibo:Series", "dcterms:title");
//        "organization"        , array("foaf:Organization", "foaf:name");
//        "journal", array("bibo:Journal", "dcterms:title");
//        "homepage", array("bkn:Homepage", "bkn:url");


    }

    /**
     * Extracts the list of all authors in value as BibiPerson
     * @param value raw string
     * @return BiBiPersons
     */
    public List<BiBiPerson> parseAuthors(String value) {
        List<BiBiPerson> persons = new ArrayList<BiBiPerson>();
        BiBiPerson bp;

        Matcher m = AND_PATTERN.matcher(value);

        String[] authors;
        // are ands in the value
        if (m.find()) {
            // split by and
            authors = AND_PATTERN.split(value);

            //check each author
            for (String author : authors) {
                if (!author.isEmpty()) {
                    StringBuilder firstname = new StringBuilder();
                    StringBuilder lastname = new StringBuilder();;

                    // Lastname, First Names
                    if (author.contains(",")) {
                        String[] names = author.split("\\s*,\\s*");
                        if (names.length > 1) {
                            lastname.append(names[0]);
                            firstname.append(names[1]);
                        } else { // only one part of the name given, assume its last name
                            lastname.append(names[0]);
                            firstname.append("");
                        }
                    } else { // First Names Lastname 
                        String[] names = author.split("\\s+");
                        if (names.length > 1) {

                            firstname.append(names[0]);
                            for (int i = 1; i < names.length - 1; i++) {
                                firstname.append(" ").append(names[i]);
                            }
                            lastname.append(names[names.length - 1]);
                        } else { // only one part of the name given, assume its last name
                            lastname.append(names[0]);
                            firstname.append("");
                        }
                    }

                    bp = new BiBiPersonImplementation();
                    bp.setFamily_name(lastname.toString());
                    bp.setGivenname(firstname.toString());

                    persons.add(bp);
                }
            }
        } else { // commas are separator
            authors = value.split("\\s*,\\s*");
            //check each author
            for (String author : authors) {

                if (!author.isEmpty()) {
                    StringBuilder firstname = new StringBuilder();
                    StringBuilder lastname = new StringBuilder();;

                    // First Names Lastname

                    String[] names = author.split("\\s+");
                    if (names.length > 1) {

                        firstname.append(names[0]);
                        for (int i = 1; i < names.length - 1; i++) {
                            firstname.append(" ").append(names[i]);
                        }
                        lastname.append(names[names.length - 1]);
                    } else { // only one part of the name given, assume its last name
                        lastname.append(names[0]);
                        firstname.append("");
                    }

                    bp = new BiBiPersonImplementation();
                    bp.setFamily_name(lastname.toString());
                    bp.setGivenname(firstname.toString());

                    persons.add(bp);
                }
            }
        }
        return persons;
    }

    /**
     * Returns a list of BiBiPublication Records for the parsed BibTeX snippet(s)
     */
    public List<BiBiPublication> getPublicationObjects() {

        List<BiBiPublication> retlist = new ArrayList<BiBiPublication>();

        Iterator iter = records.iterator();
        while (iter.hasNext()) {
            BiBiPublication p = new BiBiPublicationImplementation();
            BibMap record = (BibMap) iter.next();

            //remove eventual braces
            record.normalizeStrings();

            //do not forget to set the type on the publication object
            p.setType(BibTexType.getType(record.getType()));
            //now, insert the publication key which identifies this object
            p.setPubkey(record.getKey());
            Iterator jiter = record.keySet().iterator();
            //check for all the available fields, fill BiBiPublication with relevant values
            while (jiter.hasNext()) {
                String key = (String) jiter.next();
                String value = (String) record.get(key);
                if (key.equals(BibTexEntries.title.getName())) {
                    p.setTitle(value);
                } else if (key.equals(BibTexEntries.author.getName())) {
                    p.setAuthors(parseAuthors(value));
                } else if (key.equals(BibTexEntries.journal.getName())) {
                    p.setJournal(value);
                } else if (key.equals(BibTexEntries.publisher.getName())) {
                    p.setPublisher(value);
                } else if (key.equals(BibTexEntries.school.getName())) {
                    p.setSchool(value);
                } else if (key.equals(BibTexEntries.institution.getName())) {
                    p.setInstitution(value);
                } else if (key.equals(BibTexEntries.note.getName())) {
                    p.setNote(value);
                } else if (key.equals(BibTexEntries.url.getName())) {
                    try {
                        URI newurl = new URI(value);
                        p.setUrl(newurl);
                    } catch (URISyntaxException ex) {
                        // just an invalid URL, we can ignore that
                        System.err.println("Unvalid URL: " + value);
                    }
                } else if (key.equals(BibTexEntries.doi.getName())) {
                    p.setDoi(value);
                } else if (key.equals(BibTexEntries.year.getName())) {
                    try {
                        Calendar cal = Calendar.getInstance();
                        cal.set(Integer.parseInt(value), 1, 1);
                        p.setPublicationdate(cal.getTime());
                    } catch (NumberFormatException ex) {
                        // the year is unvalid. Can be Ignored
                        System.err.println("Unvalid year: " + value);
                    }
                }
            }
            retlist.add(p);
            p = null;
            System.out.println("");
        }
        return retlist;
    }

    /** 
     * Prints debugging output. Should be called after parse(). 
     */
    public void printout() {
        if (!"".equals(preamble)) {
            System.out.println("\u005cnDEBUG: Found Preamble: \u005cn"
                    + preamble);
        }

        System.out.println("\u005cnDEBUG: Found " + strings.size() + " Strings:");
        Iterator iter = strings.keySet().iterator();
        while (iter.hasNext()) {
            Object key = iter.next();
            System.out.println("\u005ct" + key + "\u005ct" + strings.get(key));
        }

        System.out.println("\u005cnDEBUG: Found " + records.size() + " Records:");
        iter = records.iterator();
        while (iter.hasNext()) {
            System.out.println("-----------------------------------");
            BibMap record = (BibMap) iter.next();
            System.out.println("TYPE:\u005ct" + record.getType());
            System.out.println("KEY:\u005ct" + record.getKey());
            Iterator jiter = record.keySet().iterator();
            while (jiter.hasNext()) {
                String key = (String) jiter.next();
                System.out.println("\u005ctFIELD:\u005ct" + key + "\u005ct"
                        + record.get(key));
            }
            System.out.println("");
        }
    }

    /** 
     * A bibtex file is basically a concatenation of records, which are
     * either string definitions or proper bibliographic records.  This
     * method just consumes records until the file ends, at which point it
     * resolves cross-references within individual records. 
     */
    final public void parse() throws ParseException {
        // Load the default string expansions for months.  My impression
        // is that these are supposed to expand to locale-specific strings
        // for the month.  This hack effectively makes this an "English 
        // bibtex parser"
        for (int i = 0; i < months.length; i++) {
            strings.put(months[i][0], months[i][1]);
        }
        label_1:
        while (true) {
            if (jj_2_1(3)) {
                ;
            } else {
                break label_1;
            }
            if (jj_2_2(3)) {
                strdef();
            } else if (jj_2_3(3)) {
                comdef();
            } else if (jj_2_4(3)) {
                recdef();
            } else if (jj_2_5(3)) {
                predef();
            } else if (jj_2_6(3)) {
                jj_consume_token(WORD);
            } else if (jj_2_7(3)) {
                jj_consume_token(COMMA);
            } else if (jj_2_8(3)) {
                jj_consume_token(WS);
            } else if (jj_2_9(3)) {
                jj_consume_token(0);
                {
                    if (true) {
                        return;
                    }
                }
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    /** 
     * Consumes a preamble definition. 
     */
    final public void predef() throws ParseException {
        String val;
        jj_consume_token(AT);
        jj_consume_token(PRE);
        if (jj_2_10(3)) {
            jj_consume_token(WS);
        } else {
            ;
        }
        if (jj_2_15(3)) {
            jj_consume_token(LBRACE);
            if (jj_2_11(3)) {
                jj_consume_token(WS);
            } else {
                ;
            }
            val = vals();
            if (jj_2_12(3)) {
                jj_consume_token(WS);
            } else {
                ;
            }
            jj_consume_token(RBRACE);
        } else if (jj_2_16(3)) {
            jj_consume_token(LPAREN);
            if (jj_2_13(3)) {
                jj_consume_token(WS);
            } else {
                ;
            }
            val = vals();
            if (jj_2_14(3)) {
                jj_consume_token(WS);
            } else {
                ;
            }
            jj_consume_token(RPAREN);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
        preamble = preamble + val;
    }

    /** 
     * Consumes a single string definition. A string definition is
     * basically a single pair. 
     */
    final public void strdef() throws ParseException {
        jj_consume_token(AT);
        jj_consume_token(STR);
        if (jj_2_17(3)) {
            jj_consume_token(WS);
        } else {
            ;
        }
        if (jj_2_20(3)) {
            jj_consume_token(LBRACE);
            pair(strings);
            if (jj_2_18(3)) {
                jj_consume_token(WS);
            } else {
                ;
            }
            jj_consume_token(RBRACE);
        } else if (jj_2_21(3)) {
            jj_consume_token(LPAREN);
            pair(strings);
            if (jj_2_19(3)) {
                jj_consume_token(WS);
            } else {
                ;
            }
            jj_consume_token(RPAREN);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    /** 
     * Consumes a comment definition.
     */
    final public void comdef() throws ParseException {
        jj_consume_token(AT);
        jj_consume_token(COMMENT);
        if (jj_2_22(3)) {
            jj_consume_token(WS);
        } else {
            ;
        }
        if (jj_2_29(3)) {
            jj_consume_token(LBRACE);
            label_2:
            while (true) {
                if (jj_2_23(3)) {
                    jj_consume_token(WORD);
                } else if (jj_2_24(3)) {
                    jj_consume_token(WS);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                if (jj_2_25(3)) {
                    ;
                } else {
                    break label_2;
                }
            }
            jj_consume_token(RBRACE);
        } else if (jj_2_30(3)) {
            jj_consume_token(LPAREN);
            label_3:
            while (true) {
                if (jj_2_26(3)) {
                    jj_consume_token(WORD);
                } else if (jj_2_27(3)) {
                    jj_consume_token(WS);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                if (jj_2_28(3)) {
                    ;
                } else {
                    break label_3;
                }
            }
            jj_consume_token(RPAREN);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    /** 
     * Consumes a single record definition. 
     */
    final public void recdef() throws ParseException {
        Token t1 = null;
        Token t2 = null;
        BibMap record = new BibMap();
        jj_consume_token(AT);
        t1 = jj_consume_token(WORD);
        if (jj_2_31(3)) {
            jj_consume_token(WS);
        } else {
            ;
        }
        if (jj_2_48(3)) {
            jj_consume_token(LBRACE);
            if (jj_2_32(3)) {
                jj_consume_token(WS);
            } else {
                ;
            }
            if (jj_2_37(3)) {
                if (jj_2_33(3)) {
                    t2 = jj_consume_token(WORD);
                } else if (jj_2_34(3)) {
                    t2 = jj_consume_token(COMMENT);
                } else if (jj_2_35(3)) {
                    t2 = jj_consume_token(STR);
                } else if (jj_2_36(3)) {
                    t2 = jj_consume_token(PRE);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                jj_consume_token(COMMA);
            } else {
                ;
            }
            label_4:
            while (true) {
                if (jj_2_38(3)) {
                    ;
                } else {
                    break label_4;
                }
                pair(record);
            }
            if (jj_2_39(3)) {
                jj_consume_token(WS);
            } else {
                ;
            }
            jj_consume_token(RBRACE);
        } else if (jj_2_49(3)) {
            jj_consume_token(LPAREN);
            if (jj_2_40(3)) {
                jj_consume_token(WS);
            } else {
                ;
            }
            if (jj_2_45(3)) {
                if (jj_2_41(3)) {
                    t2 = jj_consume_token(WORD);
                } else if (jj_2_42(3)) {
                    t2 = jj_consume_token(COMMENT);
                } else if (jj_2_43(3)) {
                    t2 = jj_consume_token(STR);
                } else if (jj_2_44(3)) {
                    t2 = jj_consume_token(PRE);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                jj_consume_token(COMMA);
            } else {
                ;
            }
            label_5:
            while (true) {
                if (jj_2_46(3)) {
                    ;
                } else {
                    break label_5;
                }
                pair(record);
            }
            if (jj_2_47(3)) {
                jj_consume_token(WS);
            } else {
                ;
            }
            jj_consume_token(RPAREN);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
        record.setType(t1.toString().toLowerCase());
        if (t2 != null) {
            record.setKey(t2.toString());
        }
        records.add(record);
    }

    /** 
     * Consumes a pair and places them in map. 
     */
    final public void pair(Map map) throws ParseException {
        Token id;
        String val;
        if (jj_2_50(3)) {
            jj_consume_token(WS);
        } else {
            ;
        }
        if (jj_2_51(3)) {
            id = jj_consume_token(WORD);
        } else if (jj_2_52(3)) {
            id = jj_consume_token(COMMENT);
        } else if (jj_2_53(3)) {
            id = jj_consume_token(STR);
        } else if (jj_2_54(3)) {
            id = jj_consume_token(PRE);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
        if (jj_2_55(3)) {
            jj_consume_token(WS);
        } else {
            ;
        }
        jj_consume_token(EQ);
        if (jj_2_56(3)) {
            jj_consume_token(WS);
        } else {
            ;
        }
        val = vals();
        if (jj_2_57(3)) {
            jj_consume_token(WS);
        } else {
            ;
        }
        if (jj_2_58(3)) {
            jj_consume_token(COMMA);
        } else {
            ;
        }
        String name = id.toString().toLowerCase();

        // NOTE(SM): Zotero splits comments in several fields, so here we put them back together as one.
        if ("comment".equals(name) && map.containsKey(name)) {
            val = (String) map.get(name) + "\u005cn" + val;
        }

        map.put(name, val);
    }

    /** 
     * Consumes a concatenation of "values" 
     */
    final public String vals() throws ParseException {
        String val;
        StringBuffer sb = new StringBuffer();
        val = val();
        sb.append(val);
        label_6:
        while (true) {
            if (jj_2_59(3)) {
                ;
            } else {
                break label_6;
            }
            if (jj_2_60(3)) {
                jj_consume_token(WS);
            } else {
                ;
            }
            jj_consume_token(HASH);
            if (jj_2_61(3)) {
                jj_consume_token(WS);
            } else {
                ;
            }
            val = val();
            if (sb.charAt(0) == '{') {
                sb.deleteCharAt(sb.length() - 1); // must be a curly brace
            }
            if (val.startsWith("{")) {
                val = val.substring(1, val.length() - 1);
            }
            sb.append(val + "}");
        }
        {
            if (true) {
                return sb.toString();
            }
        }
        throw new Error("Missing return statement in function");
    }

    /** 
     * Consumes a value, plus any trailing whitespace 
     */
    final public String val() throws ParseException {
        Token token;
        String val;
        if (jj_2_62(3)) {
            jj_consume_token(LBRACE);
            val = wordsq();
            jj_consume_token(RBRACE);
            {
                if (true) {
                    return "{" + val + "}";
                }
            }
        } else if (jj_2_63(3)) {
            jj_consume_token(QUOTE);
            val = words();
            jj_consume_token(QUOTE);
            {
                if (true) {
                    return "{" + val + "}";
                }
            }
        } else if (jj_2_64(3)) {
            token = jj_consume_token(WORD);
            String key = token.toString().toLowerCase();
            if (strings.containsKey(key)) {
                {
                    if (true) {
                        return (String) strings.get(key);
                    }
                }
            } else {
                {
                    if (true) {
                        return key;
                    }
                }
            }
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    /** 
     * Consumes a set of words, where a quote token is a word. 
     */
    final public String wordsq() throws ParseException {
        String s;
        Token t;
        StringBuffer sb = new StringBuffer();
        label_7:
        while (true) {
            if (jj_2_65(3)) {
                ;
            } else {
                break label_7;
            }
            if (jj_2_66(3)) {
                s = wordq();
                sb.append(s);
            } else if (jj_2_67(3)) {
                jj_consume_token(LBRACE);
                s = wordsq();
                jj_consume_token(RBRACE);
                sb.append("{" + s + "}");
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true) {
                return sb.toString();
            }
        }
        throw new Error("Missing return statement in function");
    }

    /** 
     * Consumes a set of words, where a quote token is not a word. 
     */
    final public String words() throws ParseException {
        String s;
        Token t;
        StringBuffer sb = new StringBuffer();
        label_8:
        while (true) {
            if (jj_2_68(3)) {
                ;
            } else {
                break label_8;
            }
            if (jj_2_69(3)) {
                s = word();
                sb.append(s);
            } else if (jj_2_70(3)) {
                jj_consume_token(LBRACE);
                s = wordsq();
                jj_consume_token(RBRACE);
                sb.append("{" + s + "}");
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {
            if (true) {
                return sb.toString();
            }
        }
        throw new Error("Missing return statement in function");
    }

    /** 
     * Consumes and returns a "word", where a quote token is a word. 
     */
    final public String wordq() throws ParseException {
        Token t;
        if (jj_2_71(3)) {
            t = jj_consume_token(WS);
        } else if (jj_2_72(3)) {
            t = jj_consume_token(WORD);
        } else if (jj_2_73(3)) {
            t = jj_consume_token(EQ);
        } else if (jj_2_74(3)) {
            t = jj_consume_token(LPAREN);
        } else if (jj_2_75(3)) {
            t = jj_consume_token(RPAREN);
        } else if (jj_2_76(3)) {
            t = jj_consume_token(AT);
        } else if (jj_2_77(3)) {
            t = jj_consume_token(QCHAR);
        } else if (jj_2_78(3)) {
            t = jj_consume_token(STR);
        } else if (jj_2_79(3)) {
            t = jj_consume_token(COMMA);
        } else if (jj_2_80(3)) {
            t = jj_consume_token(HASH);
        } else if (jj_2_81(3)) {
            t = jj_consume_token(PRE);
        } else if (jj_2_82(3)) {
            t = jj_consume_token(QUOTE);
        } else if (jj_2_83(3)) {
            t = jj_consume_token(COMMENT);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if (true) {
                return (t.toString());
            }
        }
        throw new Error("Missing return statement in function");
    }

    /** 
     * Consumes and returns a "word", where a quote token is not a word. 
     */
    final public String word() throws ParseException {
        Token t;
        if (jj_2_84(3)) {
            t = jj_consume_token(WS);
        } else if (jj_2_85(3)) {
            t = jj_consume_token(WORD);
        } else if (jj_2_86(3)) {
            t = jj_consume_token(EQ);
        } else if (jj_2_87(3)) {
            t = jj_consume_token(LPAREN);
        } else if (jj_2_88(3)) {
            t = jj_consume_token(RPAREN);
        } else if (jj_2_89(3)) {
            t = jj_consume_token(AT);
        } else if (jj_2_90(3)) {
            t = jj_consume_token(QCHAR);
        } else if (jj_2_91(3)) {
            t = jj_consume_token(STR);
        } else if (jj_2_92(3)) {
            t = jj_consume_token(COMMA);
        } else if (jj_2_93(3)) {
            t = jj_consume_token(HASH);
        } else if (jj_2_94(3)) {
            t = jj_consume_token(PRE);
        } else if (jj_2_95(3)) {
            t = jj_consume_token(COMMENT);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if (true) {
                return (t.toString());
            }
        }
        throw new Error("Missing return statement in function");
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_10();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    private boolean jj_2_11(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_11();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(10, xla);
        }
    }

    private boolean jj_2_12(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_12();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(11, xla);
        }
    }

    private boolean jj_2_13(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_13();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(12, xla);
        }
    }

    private boolean jj_2_14(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_14();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(13, xla);
        }
    }

    private boolean jj_2_15(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_15();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(14, xla);
        }
    }

    private boolean jj_2_16(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_16();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(15, xla);
        }
    }

    private boolean jj_2_17(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_17();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(16, xla);
        }
    }

    private boolean jj_2_18(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_18();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(17, xla);
        }
    }

    private boolean jj_2_19(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_19();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(18, xla);
        }
    }

    private boolean jj_2_20(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_20();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(19, xla);
        }
    }

    private boolean jj_2_21(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_21();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(20, xla);
        }
    }

    private boolean jj_2_22(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_22();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(21, xla);
        }
    }

    private boolean jj_2_23(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_23();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(22, xla);
        }
    }

    private boolean jj_2_24(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_24();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(23, xla);
        }
    }

    private boolean jj_2_25(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_25();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(24, xla);
        }
    }

    private boolean jj_2_26(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_26();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(25, xla);
        }
    }

    private boolean jj_2_27(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_27();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(26, xla);
        }
    }

    private boolean jj_2_28(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_28();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(27, xla);
        }
    }

    private boolean jj_2_29(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_29();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(28, xla);
        }
    }

    private boolean jj_2_30(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_30();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(29, xla);
        }
    }

    private boolean jj_2_31(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_31();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(30, xla);
        }
    }

    private boolean jj_2_32(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_32();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(31, xla);
        }
    }

    private boolean jj_2_33(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_33();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(32, xla);
        }
    }

    private boolean jj_2_34(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_34();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(33, xla);
        }
    }

    private boolean jj_2_35(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_35();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(34, xla);
        }
    }

    private boolean jj_2_36(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_36();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(35, xla);
        }
    }

    private boolean jj_2_37(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_37();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(36, xla);
        }
    }

    private boolean jj_2_38(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_38();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(37, xla);
        }
    }

    private boolean jj_2_39(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_39();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(38, xla);
        }
    }

    private boolean jj_2_40(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_40();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(39, xla);
        }
    }

    private boolean jj_2_41(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_41();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(40, xla);
        }
    }

    private boolean jj_2_42(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_42();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(41, xla);
        }
    }

    private boolean jj_2_43(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_43();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(42, xla);
        }
    }

    private boolean jj_2_44(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_44();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(43, xla);
        }
    }

    private boolean jj_2_45(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_45();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(44, xla);
        }
    }

    private boolean jj_2_46(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_46();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(45, xla);
        }
    }

    private boolean jj_2_47(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_47();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(46, xla);
        }
    }

    private boolean jj_2_48(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_48();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(47, xla);
        }
    }

    private boolean jj_2_49(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_49();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(48, xla);
        }
    }

    private boolean jj_2_50(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_50();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(49, xla);
        }
    }

    private boolean jj_2_51(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_51();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(50, xla);
        }
    }

    private boolean jj_2_52(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_52();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(51, xla);
        }
    }

    private boolean jj_2_53(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_53();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(52, xla);
        }
    }

    private boolean jj_2_54(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_54();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(53, xla);
        }
    }

    private boolean jj_2_55(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_55();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(54, xla);
        }
    }

    private boolean jj_2_56(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_56();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(55, xla);
        }
    }

    private boolean jj_2_57(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_57();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(56, xla);
        }
    }

    private boolean jj_2_58(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_58();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(57, xla);
        }
    }

    private boolean jj_2_59(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_59();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(58, xla);
        }
    }

    private boolean jj_2_60(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_60();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(59, xla);
        }
    }

    private boolean jj_2_61(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_61();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(60, xla);
        }
    }

    private boolean jj_2_62(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_62();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(61, xla);
        }
    }

    private boolean jj_2_63(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_63();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(62, xla);
        }
    }

    private boolean jj_2_64(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_64();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(63, xla);
        }
    }

    private boolean jj_2_65(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_65();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(64, xla);
        }
    }

    private boolean jj_2_66(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_66();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(65, xla);
        }
    }

    private boolean jj_2_67(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_67();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(66, xla);
        }
    }

    private boolean jj_2_68(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_68();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(67, xla);
        }
    }

    private boolean jj_2_69(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_69();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(68, xla);
        }
    }

    private boolean jj_2_70(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_70();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(69, xla);
        }
    }

    private boolean jj_2_71(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_71();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(70, xla);
        }
    }

    private boolean jj_2_72(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_72();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(71, xla);
        }
    }

    private boolean jj_2_73(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_73();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(72, xla);
        }
    }

    private boolean jj_2_74(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_74();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(73, xla);
        }
    }

    private boolean jj_2_75(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_75();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(74, xla);
        }
    }

    private boolean jj_2_76(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_76();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(75, xla);
        }
    }

    private boolean jj_2_77(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_77();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(76, xla);
        }
    }

    private boolean jj_2_78(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_78();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(77, xla);
        }
    }

    private boolean jj_2_79(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_79();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(78, xla);
        }
    }

    private boolean jj_2_80(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_80();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(79, xla);
        }
    }

    private boolean jj_2_81(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_81();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(80, xla);
        }
    }

    private boolean jj_2_82(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_82();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(81, xla);
        }
    }

    private boolean jj_2_83(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_83();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(82, xla);
        }
    }

    private boolean jj_2_84(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_84();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(83, xla);
        }
    }

    private boolean jj_2_85(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_85();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(84, xla);
        }
    }

    private boolean jj_2_86(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_86();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(85, xla);
        }
    }

    private boolean jj_2_87(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_87();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(86, xla);
        }
    }

    private boolean jj_2_88(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_88();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(87, xla);
        }
    }

    private boolean jj_2_89(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_89();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(88, xla);
        }
    }

    private boolean jj_2_90(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_90();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(89, xla);
        }
    }

    private boolean jj_2_91(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_91();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(90, xla);
        }
    }

    private boolean jj_2_92(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_92();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(91, xla);
        }
    }

    private boolean jj_2_93(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_93();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(92, xla);
        }
    }

    private boolean jj_2_94(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_94();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(93, xla);
        }
    }

    private boolean jj_2_95(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_95();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(94, xla);
        }
    }

    private boolean jj_3_42() {
        if (jj_scan_token(COMMENT)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_34() {
        if (jj_scan_token(COMMENT)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_51() {
        if (jj_scan_token(WORD)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_92() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_80() {
        if (jj_scan_token(HASH)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_41() {
        if (jj_scan_token(WORD)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_33() {
        if (jj_scan_token(WORD)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_45() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_41()) {
            jj_scanpos = xsp;
            if (jj_3_42()) {
                jj_scanpos = xsp;
                if (jj_3_43()) {
                    jj_scanpos = xsp;
                    if (jj_3_44()) {
                        return true;
                    }
                }
            }
        }
        if (jj_scan_token(COMMA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_37() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_33()) {
            jj_scanpos = xsp;
            if (jj_3_34()) {
                jj_scanpos = xsp;
                if (jj_3_35()) {
                    jj_scanpos = xsp;
                    if (jj_3_36()) {
                        return true;
                    }
                }
            }
        }
        if (jj_scan_token(COMMA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_50() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_14() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_50()) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3_51()) {
            jj_scanpos = xsp;
            if (jj_3_52()) {
                jj_scanpos = xsp;
                if (jj_3_53()) {
                    jj_scanpos = xsp;
                    if (jj_3_54()) {
                        return true;
                    }
                }
            }
        }
        xsp = jj_scanpos;
        if (jj_3_55()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(EQ)) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_3_56()) {
            jj_scanpos = xsp;
        }
        if (jj_3R_13()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_31() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_91() {
        if (jj_scan_token(STR)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_40() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_79() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_32() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_9() {
        if (jj_scan_token(0)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_8() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_90() {
        if (jj_scan_token(QCHAR)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_78() {
        if (jj_scan_token(STR)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_27() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_24() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_49() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_40()) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3_45()) {
            jj_scanpos = xsp;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_46()) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3_47()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_48() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_32()) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3_37()) {
            jj_scanpos = xsp;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_38()) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3_39()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_19() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_11() {
        if (jj_scan_token(AT)) {
            return true;
        }
        if (jj_scan_token(WORD)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_31()) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3_48()) {
            jj_scanpos = xsp;
            if (jj_3_49()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_28() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_26()) {
            jj_scanpos = xsp;
            if (jj_3_27()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_26() {
        if (jj_scan_token(WORD)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_22() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_18() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_25() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_23()) {
            jj_scanpos = xsp;
            if (jj_3_24()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_23() {
        if (jj_scan_token(WORD)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_7() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_89() {
        if (jj_scan_token(AT)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_77() {
        if (jj_scan_token(QCHAR)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_14() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_12() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_6() {
        if (jj_scan_token(WORD)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_30() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        Token xsp;
        if (jj_3_28()) {
            return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_28()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_29() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        Token xsp;
        if (jj_3_25()) {
            return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_25()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_76() {
        if (jj_scan_token(AT)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_88() {
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_10() {
        if (jj_scan_token(AT)) {
            return true;
        }
        if (jj_scan_token(COMMENT)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_22()) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3_29()) {
            jj_scanpos = xsp;
            if (jj_3_30()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_17() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_5() {
        if (jj_3R_12()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_21() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_14()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_20() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (jj_3R_14()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_75() {
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_87() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_9() {
        if (jj_scan_token(AT)) {
            return true;
        }
        if (jj_scan_token(STR)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_17()) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3_20()) {
            jj_scanpos = xsp;
            if (jj_3_21()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_13() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_11() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_4() {
        if (jj_3R_11()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_10() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_86() {
        if (jj_scan_token(EQ)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_74() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_16() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_13()) {
            jj_scanpos = xsp;
        }
        if (jj_3R_13()) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_3_14()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_15() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_11()) {
            jj_scanpos = xsp;
        }
        if (jj_3R_13()) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_3_12()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_3() {
        if (jj_3R_10()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_12() {
        if (jj_scan_token(AT)) {
            return true;
        }
        if (jj_scan_token(PRE)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_10()) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_3_15()) {
            jj_scanpos = xsp;
            if (jj_3_16()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_85() {
        if (jj_scan_token(WORD)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_73() {
        if (jj_scan_token(EQ)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_2() {
        if (jj_3R_9()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_1() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_2()) {
            jj_scanpos = xsp;
            if (jj_3_3()) {
                jj_scanpos = xsp;
                if (jj_3_4()) {
                    jj_scanpos = xsp;
                    if (jj_3_5()) {
                        jj_scanpos = xsp;
                        if (jj_3_6()) {
                            jj_scanpos = xsp;
                            if (jj_3_7()) {
                                jj_scanpos = xsp;
                                if (jj_3_8()) {
                                    jj_scanpos = xsp;
                                    if (jj_3_9()) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_84() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_19() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_84()) {
            jj_scanpos = xsp;
            if (jj_3_85()) {
                jj_scanpos = xsp;
                if (jj_3_86()) {
                    jj_scanpos = xsp;
                    if (jj_3_87()) {
                        jj_scanpos = xsp;
                        if (jj_3_88()) {
                            jj_scanpos = xsp;
                            if (jj_3_89()) {
                                jj_scanpos = xsp;
                                if (jj_3_90()) {
                                    jj_scanpos = xsp;
                                    if (jj_3_91()) {
                                        jj_scanpos = xsp;
                                        if (jj_3_92()) {
                                            jj_scanpos = xsp;
                                            if (jj_3_93()) {
                                                jj_scanpos = xsp;
                                                if (jj_3_94()) {
                                                    jj_scanpos = xsp;
                                                    if (jj_3_95()) {
                                                        return true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_72() {
        if (jj_scan_token(WORD)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_71() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_18() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_71()) {
            jj_scanpos = xsp;
            if (jj_3_72()) {
                jj_scanpos = xsp;
                if (jj_3_73()) {
                    jj_scanpos = xsp;
                    if (jj_3_74()) {
                        jj_scanpos = xsp;
                        if (jj_3_75()) {
                            jj_scanpos = xsp;
                            if (jj_3_76()) {
                                jj_scanpos = xsp;
                                if (jj_3_77()) {
                                    jj_scanpos = xsp;
                                    if (jj_3_78()) {
                                        jj_scanpos = xsp;
                                        if (jj_3_79()) {
                                            jj_scanpos = xsp;
                                            if (jj_3_80()) {
                                                jj_scanpos = xsp;
                                                if (jj_3_81()) {
                                                    jj_scanpos = xsp;
                                                    if (jj_3_82()) {
                                                        jj_scanpos = xsp;
                                                        if (jj_3_83()) {
                                                            return true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_58() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_57() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_70() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (jj_3R_16()) {
            return true;
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_68() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_69()) {
            jj_scanpos = xsp;
            if (jj_3_70()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_69() {
        if (jj_3R_19()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_17() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_68()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_47() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_39() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_67() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (jj_3R_16()) {
            return true;
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_65() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_66()) {
            jj_scanpos = xsp;
            if (jj_3_67()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_66() {
        if (jj_3R_18()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_16() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_65()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_56() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_46() {
        if (jj_3R_14()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_38() {
        if (jj_3R_14()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_55() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_64() {
        if (jj_scan_token(WORD)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_63() {
        if (jj_scan_token(QUOTE)) {
            return true;
        }
        if (jj_3R_17()) {
            return true;
        }
        if (jj_scan_token(QUOTE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_15() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_62()) {
            jj_scanpos = xsp;
            if (jj_3_63()) {
                jj_scanpos = xsp;
                if (jj_3_64()) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3_54() {
        if (jj_scan_token(PRE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_62() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (jj_3R_16()) {
            return true;
        }
        if (jj_scan_token(RBRACE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_44() {
        if (jj_scan_token(PRE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_83() {
        if (jj_scan_token(COMMENT)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_36() {
        if (jj_scan_token(PRE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_95() {
        if (jj_scan_token(COMMENT)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_61() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_53() {
        if (jj_scan_token(STR)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_43() {
        if (jj_scan_token(STR)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_94() {
        if (jj_scan_token(PRE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_35() {
        if (jj_scan_token(STR)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_82() {
        if (jj_scan_token(QUOTE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_60() {
        if (jj_scan_token(WS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_59() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_60()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(HASH)) {
            return true;
        }
        xsp = jj_scanpos;
        if (jj_3_61()) {
            jj_scanpos = xsp;
        }
        if (jj_3R_15()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_13() {
        if (jj_3R_15()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_59()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_52() {
        if (jj_scan_token(COMMENT)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_93() {
        if (jj_scan_token(HASH)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_81() {
        if (jj_scan_token(PRE)) {
            return true;
        }
        return false;
    }
    /** Generated Token Manager. */
    public BibtexParserTokenManager token_source;
    JavaCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[0];
    static private int[] jj_la1_0;

    static {
        jj_la1_init_0();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{};
    }
    final private JJCalls[] jj_2_rtns = new JJCalls[95];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /** Constructor with InputStream. */
    public BibtexParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /** Constructor with InputStream and supplied encoding */
    public BibtexParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new BibtexParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Constructor. */
    public BibtexParser(java.io.Reader stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new BibtexParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Reinitialise. */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Constructor with generated Token Manager. */
    public BibtexParser(BibtexParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /** Reinitialise. */
    public void ReInit(BibtexParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) {
                            c.first = null;
                        }
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    static private final class LookaheadSuccess extends java.lang.Error {
    }
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.
                        getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) {
                jj_add_error_token(kind, i);
            }
        }
        if (jj_scanpos.kind != kind) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            throw jj_ls;
        }
        return false;
    }

    /** Get the next Token. */
    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }
    private java.util.List jj_expentries = new java.util.ArrayList();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) {
            return;
        }
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    /** Generate ParseException. */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[20];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 0; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 20; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    final public void enable_tracing() {
    }

    /** Disable tracing. */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 95; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                            case 9:
                                jj_3_10();
                                break;
                            case 10:
                                jj_3_11();
                                break;
                            case 11:
                                jj_3_12();
                                break;
                            case 12:
                                jj_3_13();
                                break;
                            case 13:
                                jj_3_14();
                                break;
                            case 14:
                                jj_3_15();
                                break;
                            case 15:
                                jj_3_16();
                                break;
                            case 16:
                                jj_3_17();
                                break;
                            case 17:
                                jj_3_18();
                                break;
                            case 18:
                                jj_3_19();
                                break;
                            case 19:
                                jj_3_20();
                                break;
                            case 20:
                                jj_3_21();
                                break;
                            case 21:
                                jj_3_22();
                                break;
                            case 22:
                                jj_3_23();
                                break;
                            case 23:
                                jj_3_24();
                                break;
                            case 24:
                                jj_3_25();
                                break;
                            case 25:
                                jj_3_26();
                                break;
                            case 26:
                                jj_3_27();
                                break;
                            case 27:
                                jj_3_28();
                                break;
                            case 28:
                                jj_3_29();
                                break;
                            case 29:
                                jj_3_30();
                                break;
                            case 30:
                                jj_3_31();
                                break;
                            case 31:
                                jj_3_32();
                                break;
                            case 32:
                                jj_3_33();
                                break;
                            case 33:
                                jj_3_34();
                                break;
                            case 34:
                                jj_3_35();
                                break;
                            case 35:
                                jj_3_36();
                                break;
                            case 36:
                                jj_3_37();
                                break;
                            case 37:
                                jj_3_38();
                                break;
                            case 38:
                                jj_3_39();
                                break;
                            case 39:
                                jj_3_40();
                                break;
                            case 40:
                                jj_3_41();
                                break;
                            case 41:
                                jj_3_42();
                                break;
                            case 42:
                                jj_3_43();
                                break;
                            case 43:
                                jj_3_44();
                                break;
                            case 44:
                                jj_3_45();
                                break;
                            case 45:
                                jj_3_46();
                                break;
                            case 46:
                                jj_3_47();
                                break;
                            case 47:
                                jj_3_48();
                                break;
                            case 48:
                                jj_3_49();
                                break;
                            case 49:
                                jj_3_50();
                                break;
                            case 50:
                                jj_3_51();
                                break;
                            case 51:
                                jj_3_52();
                                break;
                            case 52:
                                jj_3_53();
                                break;
                            case 53:
                                jj_3_54();
                                break;
                            case 54:
                                jj_3_55();
                                break;
                            case 55:
                                jj_3_56();
                                break;
                            case 56:
                                jj_3_57();
                                break;
                            case 57:
                                jj_3_58();
                                break;
                            case 58:
                                jj_3_59();
                                break;
                            case 59:
                                jj_3_60();
                                break;
                            case 60:
                                jj_3_61();
                                break;
                            case 61:
                                jj_3_62();
                                break;
                            case 62:
                                jj_3_63();
                                break;
                            case 63:
                                jj_3_64();
                                break;
                            case 64:
                                jj_3_65();
                                break;
                            case 65:
                                jj_3_66();
                                break;
                            case 66:
                                jj_3_67();
                                break;
                            case 67:
                                jj_3_68();
                                break;
                            case 68:
                                jj_3_69();
                                break;
                            case 69:
                                jj_3_70();
                                break;
                            case 70:
                                jj_3_71();
                                break;
                            case 71:
                                jj_3_72();
                                break;
                            case 72:
                                jj_3_73();
                                break;
                            case 73:
                                jj_3_74();
                                break;
                            case 74:
                                jj_3_75();
                                break;
                            case 75:
                                jj_3_76();
                                break;
                            case 76:
                                jj_3_77();
                                break;
                            case 77:
                                jj_3_78();
                                break;
                            case 78:
                                jj_3_79();
                                break;
                            case 79:
                                jj_3_80();
                                break;
                            case 80:
                                jj_3_81();
                                break;
                            case 81:
                                jj_3_82();
                                break;
                            case 82:
                                jj_3_83();
                                break;
                            case 83:
                                jj_3_84();
                                break;
                            case 84:
                                jj_3_85();
                                break;
                            case 85:
                                jj_3_86();
                                break;
                            case 86:
                                jj_3_87();
                                break;
                            case 87:
                                jj_3_88();
                                break;
                            case 88:
                                jj_3_89();
                                break;
                            case 89:
                                jj_3_90();
                                break;
                            case 90:
                                jj_3_91();
                                break;
                            case 91:
                                jj_3_92();
                                break;
                            case 92:
                                jj_3_93();
                                break;
                            case 93:
                                jj_3_94();
                                break;
                            case 94:
                                jj_3_95();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {

        int gen;
        Token first;
        int arg;
        JJCalls next;
    }
}

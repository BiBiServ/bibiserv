package de.unibi.cebitec.bibiserv.sequence.parser;


import de.unibi.cebitec.bibiserv.sequenceparser.tools.PatternType;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Thomas Gatter - tgatter(at)cebitec.uni-bielefeld.de
 */
public abstract class AbstractSequenceParser extends AbstractStreamHandler implements SequenceParser{

    protected List<String> warnings;
  
    /**
     * Set input and output-streams on creation. Also specify the patterntype
     * for live validation.
     *
     * @param input Reader containing the input data
     * @param output Pipe to write data to after validation and consolidation.
     */
    public AbstractSequenceParser(BufferedReader input, BufferedWriter output,
            PatternType patternType) {
         super(input, output);
         this.patternType = patternType;
         warnings = new ArrayList<String>();

    }
    
     /**
     * Reads and validates the next block on input stream. All read data from
     * input must be written to output immediately!
     * A block is a sequence in sequence formats or a block containing a part of all
     * sequences in alignment only formats.
     *
     * @return Length of the parsed sequence for sequence formats or number of 
     * sequences in this block for alignment only formats.
     * Or -1 if end was reached.
     */
    @Override
    abstract public int parseAndValidateNextBlock() throws SequenceParserException,ForcedAbortOfPartValidation;

    /**
     * Return all warnings generated by parser.
     *
     * @return
     */
    @Override
    public List<String> getWarnings() {
        return warnings;
    }


    /**
     * Adds the string to the warnings.
     *
     * @param info
     */
    protected void logWarning(String info) {
        warnings.add(info);
    }

    @Override
    public void setMaximumCharsToValidate(int x) {
        maxLength = x;
    }
    
    

}

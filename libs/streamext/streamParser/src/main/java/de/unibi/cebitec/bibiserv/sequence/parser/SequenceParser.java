package de.unibi.cebitec.bibiserv.sequence.parser;

import java.util.List;

/**
 *
 * @author Thomas Gatter - tgatter(at)cebitec.uni-bielefeld.de
 */
public interface SequenceParser {

    /**
     * Reads and validates the next block on input stream. All read data from
     * input must be written to output immediately! A block is a sequence in
     * sequence formats or a block containing a part of all sequences in
     * alignment only formats.
     *
     * @return Length of the parsed sequence for sequence formats or number of
     * sequences in this block for alignment only formats. Or -1 if end was
     * reached.
     */
    abstract public int parseAndValidateNextBlock() throws SequenceParserException, ForcedAbortOfPartValidation;

    /**
     * Return all warnings generated by parser.
     *
     * @return
     */
    public List<String> getWarnings();

    /**
     * Setting this will abort the validation with an exception after x chars are read.
     * It will be thrown exactly when the char X was read and NOT when it was validated.
     * Since only new data is read when the previous chars are validated this
     * means that always about X-Y chars are indeed validated and Y much smaller
     * X. WARNING: The exact amount of read chars is not deterministic, but
     * rather depends on the availability in the stream and the data itself.
     *
     * @param x Number of chars to read before aborting the validation process.
     */
    public void setMaximumCharsToValidate(int x);
}

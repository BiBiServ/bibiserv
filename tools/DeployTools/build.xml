<?xml version="1.0" encoding="UTF-8"?>
<!--
    ANT build configuration file
    Author: Jan Krueger <jkrueger@techfak.uni-bielefeld.de>
-->
<project name="BiBiServ_DeployTools" default="dist" xmlns:ivy="antlib:org.apache.ivy.ant">


    <property name="project.name" value="BiBiServ_DeployTools"/>
   
    <!-- getting access to environment vars -->
    <property environment="env"/>
    
    <!-- ################################
         # check some conditions before #
         ################################ -->
    <fail message="At least Java 6 is needed to compile '${project}'. You are running ${java.version}, ${java.specification.version}, ${java.specification.name}">
        <condition>
            <not>
                <or>
                    <!-- any Java 6 release is supported -->
                    <equals arg1="${java.specification.version}" arg2="1.6" trim="yes" casesensitive="no"/>
                    <!-- upcoming Java 7 release also supported -->
                    <equals arg1="${java.specification.version}" arg2="1.7" trim="yes" casesensitive="no"/>
                </or>
            </not>
        </condition>
    </fail>
    
        <!-- include ant-contrib tasks -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
    
    <!-- project directories -->
    
    <property name="src" value="src"/>
    <property name="test.src" value="test"/>

    <property name="dest" value="dest"/>
    <property name="test.dest" value="test.dest"/>

    <property name="dist" value="dist"/>
    <property name="lib" value="lib"/>
          
    
    <!-- compile classpath - used for compiling-->
    <path id="compile.classpath">
        <!-- include jar files containing depending libs -->
        <fileset dir="lib">
            <include name="**/*.jar"/>
            <exclude name="ant*.jar"/>
        </fileset>
    </path>
    
    <!-- test classpath - used for compiling and run JUnit tests -->
    <path id="test.classpath">
        <!-- include compile.classpath -->
        <path refid="compile.classpath"/>
        <!-- include compiled distribution -->
        <dirset dir="${dest}"/>
        <!-- include templates -->
        <dirset dir="."/>
        <!-- include compiled tests -->
        <dirset dir="${test.dest}"/>
    </path>
    
    <!-- create all necessary directories -->
    <target name="mkdir">
        <mkdir dir="${dest}"/>
        <mkdir dir="${dist}"/>
        <mkdir dir="${lib}"/>
        <mkdir dir="${test.dest}"/>

       
    </target>
    
    <!-- clean everything but the distribution itsself -->
    <target name="clean" description="clean everything but the distribution itsself">
        <delete dir="${dest}"/>
        <delete dir="${test.dest}"/>
       
    </target>
    
    <!-- clean really everthing -->
    <target name="clean-all" depends="clean" description="clean really everthing">
        <delete dir="${dist}"/>
        <delete dir="${lib}"/>
        <delete dir="ivy-rep"/>
    </target>
    
    <!-- compile source files  -->
    <target name="compile" description="compile source files " depends="mkdir,resolve" >
        <javac  srcdir="${src}" destdir="${dest}" debug="on" classpathref="compile.classpath"/>
    </target>
    <!-- compile test files -->
    <target name="compile_test" description="compile test files" depends="compile">
        <javac srcdir="${test.src}" destdir="${test.dest}"  debug="on" classpathref="test.classpath"/>
    </target>
    <!-- generates jar archive  -->
    <target name="dist" description="generate an java archive" depends="compile">
        <jar destfile="${dist}/${project.name}.jar" basedir="${dest}">
            <fileset dir="${dest}">
                <exclude name="test/*"/>
                <include name="**/*.class"/>
            </fileset>   
        </jar>
    </target>

    <target name="test" description="test ant tasks" depends="compile">
        <taskdef name="VerifyDownload"
            classname="de.unibi.techfak.bibiserv.deploy.tools.VerifyDownload"
            classpathref="test.classpath"
            onerror="ignore"/>

        <VerifyDownload runnableitemfile="testdata/paramtesttool.bs2"
                        downloaddir="testdata/resources/downloads2"/>

        <taskdef name="VerifyFunction"
            classname="de.unibi.techfak.bibiserv.deploy.tools.VerifyFunction"
            classpathref="test.classpath"
            onerror="report"/>


        <VerifyFunction runnableitemfile="testdata/paramtesttool.bs2"/>

        <taskdef name="VerifyImage"
            classname="de.unibi.techfak.bibiserv.deploy.tools.VerifyImage"
            classpathref="test.classpath"
            onerror="report"/>

        <VerifyImage runnableitemfile="testdata/paramtesttool.bs2"
            imagedir="testdata/resources"
            ignorepattern="^(http:|file:|\/).*$"/>

    </target>
    
    <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
    
    <!-- set ivy.settings.file property -->
    <if>
        <http url="http://bibiserv.techfak.uni-bielefeld.de/ivy-rep/ivysettings.xml" errorsbeginat="300"/>
        <then>
            <echo>Loading Ivy Settings from BiBiServ ... </echo>
            <ivy:settings url="http://bibiserv.techfak.uni-bielefeld.de/ivy-rep/ivysettings.xml"/>
        </then>
        <else>
            <echo>BiBiserv not available, load Ivy settings from ${user.home}/ivy-rep/ivy-settings.xml or if this file does not exist load default settings file</echo>
            <ivy:settings file="${user.home}/ivy-rep/ivysettings.xml"/>
        </else>
    </if>
    

    
    
    <!-- use ivy to resolve  library dependencies -->
    <target name="resolve" description="retrieve dependencies with ivy">
        <ivy:retrieve/>
    </target>
    
    <!-- publish current project in private ivy-repository -->
    <target name="publish" depends="dist,_mercurial" description="publish package as modul on local ivy repository">
        <ivy:publish resolver="private" validate="false" overwrite="true" artifactspattern="dist/[artifact].[ext]" pubrevision="${HG.TAG}_${HG.REVISION}"/>
    </target>
    
    <!--clean ivy-cache -->
    <target name="clean-cache" description="clear ivy cache">
        <ivy:cleancache/>
    </target>
    
    <!-- install package from local ivy-repository on the server -->
    <target name="install" depends="dist,_mercurial" description="install published package on bibiserv repository : ssh.user, ssh.key and ssh.passphrase(optional) must set as property!">
        
        <!-- create local ivy-rep as install base -->
        <mkdir dir="ivy-rep"/>
        <ivy:publish resolver="local" validate="false" overwrite="true" artifactspattern="dist/[artifact].[ext]" pubrevision="${HG.TAG}_${HG.REVISION}"/>
        
        <!-- load ssh specify setting from bibiserv -->
        <property url="http://bibiserv.techfak.uni-bielefeld.de/ivy-rep/ivy_ssh.properties"/>
        
        <!-- check if ${ssh.key} and ${ssh.user} is set -->
        <fail unless="ssh.user" message="The Target &lt;install&gt; uses ssh key based authentication. Give the ssh user for ${ssh.host} as property 'ssh.user' as argument to the ant call!"/>
        <fail unless="ssh.key" message="The Target &lt;install&gt; uses ssh key based authentication. Give the location of your private key as property 'ssh.key' and optional a passphrase as property 'ssh.passphrase' as argument to the ant call!"/>
        
        
        <!-- copy local ivy-rep to bibiserv using porta.techfak.uni-bielefeld.de -->
        <scp todir="${ssh.user}@${ssh.host}:${ssh.basedir}/ivy-rep" passphrase="${ssh.passphrase}" keyfile="${ssh.key}">
            <fileset dir="ivy-rep"/>
        </scp>
        
        <!-- change file AND directory permission on remote sevrver -->
        <sshexec host="${ssh.host}" username="${ssh.user}" keyfile="${ssh.key}" passphrase="${ssh.passphrase}" command="find -L ${ssh.basedir}/ivy-rep -type d -user ${ssh.user} | xargs chmod g+ws; find -L ${ssh.basedir}/ivy-rep -type f -user ${ssh.user} | xargs chmod g+w "/>
    </target>
    
    <!-- target, for internal use only -->
    <target  name="_mercurial" description="get the latest tag name and revision number">
        
        <exec executable="bash" outputproperty="HG.TAG">
            <arg line = "-c "/>
            <arg value = "hg tags | head -n 2 | grep -v tip |  cut -f 1 -d ' '  "/>
        </exec>
        <exec executable="bash" outputproperty="HG.REVISION">
            <arg line = "-c "/>
            <arg value = "hg tip |  grep changeset: | cut -f 2 -d ':' | sed -e 's/^ *//' "/>
        </exec>
        
    </target>
    
    <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
    
</project>